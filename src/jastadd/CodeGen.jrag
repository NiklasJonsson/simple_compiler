/**
 * @author jesper.oqvist@cs.lth.se
 */
aspect CodeGen {

	public void Program.genCode(PrintStream out) {
		out.println(".global _start");
		out.println(".data");
		out.println("buf: .skip 1024");
		out.println(".text");
		out.println("_start:");

		// generate main code
		List<Function> funcs = getFunctions();
		Function main = null;
		for (Function f : funcs) {
			if (f.getFunctionId().getID().equals("main")){
				main = f;
				break;
			}
		}
		main.genCode(out);
		
		// call sys_exit:
		out.println("sys_exit:");
		out.println("	movq %rbp, %rsp");
		out.println("	popq %rbp");
		out.println("	movq $0, %rdi");
		out.println("	movq $60, %rax");
		out.println("	syscall"); // done!
		
		// Generate everything except main
		for (Function f : funcs) {
			if (!f.getFunctionId().getID().equals("main")){
				f.genCode(out);
				out.println("	jmp funky_done");
			}
		} 
		
		// helper functions
		out.println("# Procedure to read number from stdin");
		out.println("# C signature: long int read(void)");
		out.println("read:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $0, %rdi");
		out.println("        movq $buf, %rsi");
		out.println("        movq $1024, %rdx");
		out.println("        movq $0, %rax");
		out.println("        syscall                 # %rax = sys_read(0, buf, 1024)");
		out.println("        ### convert string to integer:");
		out.println("        ### %rax contains nchar");
		out.println("        ### %rsi contains ptr");
		out.println("        movq $0, %rdx           # sum = 0");
		out.println("atoi_loop:");
		out.println("        cmpq $0, %rax           # while (nchar > 0)");
		out.println("        jle atoi_done           # leave loop if nchar <= 0");
		out.println("        movzbq (%rsi), %rbx     # move byte, and sign extend to qword");
		out.println("        cmpq $0x30, %rbx        # test if < '0'");
		out.println("        jl atoi_done            # character is not numeric");
		out.println("        cmpq $0x39, %rbx        # test if > '9'");
		out.println("        jg atoi_done            # character is not numeric");
		out.println("        imulq $10, %rdx         # multiply sum by 10");
		out.println("        subq $0x30, %rbx        # value of character");
		out.println("        addq %rbx, %rdx         # add to sum");
		out.println("        incq %rsi               # step to next char");
		out.println("        decq %rax               # nchar--");
		out.println("        jmp atoi_loop           # loop back");
		out.println("atoi_done:");
		out.println("        movq %rdx, %rax         # return value in RAX");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("# Procedure to print number to stdout");
		out.println("# C signature: void print(long int)");
		out.println("print:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        ### convert integer to string");
		out.println("        movq 16(%rbp), %rax     # parameter");
		out.println("        movq $(buf+1023), %rsi  # write ptr (start from end of buf)");
		out.println("        movb $0x0a, (%rsi)      # insert newline");
		out.println("        movq $1, %rcx           # string length");
		out.println("itoa_loop:                      # do.. while (at least one iteration)");
		out.println("        movq $10, %rbx");
		out.println("        movq $0, %rdx");
		out.println("        idivq %rbx              # divide rdx:rax by 10");
		out.println("        addb $0x30, %dl         # remainder + '0'");
		out.println("        decq %rsi               # move string pointer");
		out.println("        movb %dl, (%rsi)");
		out.println("        incq %rcx               # increment string length");
		out.println("        cmpq $0, %rax");
		out.println("        jg itoa_loop            # produce more digits");
		out.println("itoa_done:");
		out.println("        movq $1, %rdi");
		out.println("        movq %rcx, %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("print_string:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $1, %rdi");
		out.println("        movq 16(%rbp), %rsi");
		out.println("        movq 24(%rbp), %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("funky_done:");
		out.println("	movq %rbp, %rsp");
		out.println("	popq %rbp");
		out.println("	ret");
	}
	public void Function.genCode(PrintStream o) {
		o.println();
		o.println(getFunctionId().getID() + ":");
		o.println("	pushq %rbp");
		o.println("	movq %rsp, %rbp");
		o.println("	subq $" + (numLocals() * 8) + ", %rsp");
		getBlock().genCode(o);
	}
	public void Block.genCode(PrintStream o) {
		for(Stmt s : getStmts()) {
			s.genCode(o);
		}
	}

// ------------------------------------------ STMT ---------------------------------
	public abstract void Stmt.genCode(PrintStream o);
	public void DeclStmt.genCode(PrintStream o) {
		if (hasExpr()) {
			getExpr().genCode(o);
			o.println("	movq %rax, " + address());
		}
	}
	public void WhileStmt.genCode(PrintStream o) {
		String done = uniqueLabel() + "_done";
		String loop = uniqueLabel() + "_loop";
		o.println(loop + ":");
		getCondition().genCode(o, done);
		getBlock().genCode(o);
		o.println("	jmp " + loop);
		o.println(done + ":");
	}
	public void ReturnStmt.genCode(PrintStream o) {
		
		getExpr().genCode(o);
		if (!isInMain()) {
			o.println("	jmp funky_done");
		} else {
			// call sys_exit:
			o.println("	jmp sys_exit");
		}

	}
	inh boolean ReturnStmt.isInMain();
	eq Function.getChild().isInMain() = getFunctionId().getID().equals("main");
	public void AssStmt.genCode(PrintStream o) {
		getExpr().genCode(o);
		o.println("	movq %rax, " + getIdUse().getAddress());
	}
	public void FunctionStmt.genCode(PrintStream o) {
		getFunctionCall().genCode(o);
	}
	
	//inh Function Stmt.getEnclosingFunction();
	//eq Function.getBlock().getEnclosingFunction() = this;

	syn String Stmt.uniqueLabel() = getIndexPrefix();
	inh String Stmt.getIndexPrefix();
	eq Block.getStmt(int index).getIndexPrefix() = getIndexPrefix() + index;
	inh String Block.getIndexPrefix();
	eq Function.getChild().getIndexPrefix() = getFunctionId().getID();

	public void IfStmt.genCode(PrintStream o) {
		String elseLabel = uniqueLabel() + "_else";
		String doneLabel = uniqueLabel() + "_done";
		getCondition().genCode(o, elseLabel);
		getif().genCode(o);
		o.println("	jmp " + doneLabel);
		o.println(elseLabel+ ":");
		if (haselse()) {
			getelse().genCode(o);
		}
		o.println(doneLabel +":");
	}
// ------------------------------------------ CONDITION ---------------------------------
	public void Condition.genCode(PrintStream o, String label) {
		getLeft().genCode(o);
		o.println("	pushq %rax");
		getRight().genCode(o);
		o.println("	movq %rax, %rbx");
		o.println("	popq %rax");
		o.println("	cmpq %rbx, %rax");
		printOperator(o, label);
	}
	public abstract void Condition.printOperator(PrintStream o, String label);
	public void Greater.printOperator(PrintStream o, String label) {
		o.println("	jle "+ label);
	}
	
	public void Lesser.printOperator(PrintStream o, String label) {
		o.println("	jge " + label);
	}

	public void Equal.printOperator(PrintStream o, String label) {
		o.println("	jne " + label);
	}

	public void NotEqual.printOperator(PrintStream o, String label) {
		o.println("	je " + label);
	}

	public void GreaterEqual.printOperator(PrintStream o, String label) {
		o.println("	jl " + label);
	}

	public void LesserEqual.printOperator(PrintStream o, String label) {
		o.println("	jg " + label);
	}


// ------------------------------------------ EXPR ---------------------------------
	public abstract void Expr.genCode(PrintStream o);
	public void Numeral.genCode(PrintStream o) {
		o.println("	movq $" + getNUMERAL() + ", %rax");
	}

	public void BinaryExpr.genCode(PrintStream o) {
		getLeft().genCode(o);
		o.println("	pushq %rax");
		getRight().genCode(o);
		o.println("	movq %rax, %rbx");
		o.println("	popq %rax");
		printOperator(o);
	}
	public abstract void BinaryExpr.printOperator(PrintStream o);
	public void MulExpr.printOperator(PrintStream o) {
		o.println("	imulq %rbx, %rax");
	}

	public void DivExpr.printOperator(PrintStream o) {
		o.println("	movq $0, %rdx");
		o.println("	idivq %rbx");
	}

	public void ModExpr.printOperator(PrintStream o) {
		o.println("	movq $0, %rdx");
		o.println("	idivq %rbx");
		o.println("	movq %rdx, %rax");
	}

	public void AddExpr.printOperator(PrintStream o) {
		o.println("	addq %rbx, %rax");
	}

	public void SubExpr.printOperator(PrintStream o) {
		o.println("	subq %rbx, %rax");
	}

	public void IdUse.genCode(PrintStream o) {
		o.println("	movq " + getAddress() + ", %rax");
	}

	public String IdUse.getAddress() {
		String address = "";
		Declaration d = decl();
		if(d instanceof Param) {
			Param p = (Param) d;
			address = p.address();
		} else {
			DeclStmt de = (DeclStmt) d;
			address = de.address();
		}
		return address;
	}

	public void FunctionCall.genCode(PrintStream o) {
		for(int i = getNumExpr() - 1; i > -1; i--) {
			getExpr(i).genCode(o);
			o.println("	pushq %rax");
		}
		o.println("	call " + getID());
	}

	syn String Param.address() = (paramIndex() * 8 + 16) + "(%rbp)";
	inh int Param.paramIndex();
	eq Function.getParam(int index).paramIndex() = index;
	/**
 	 * Address of local variable variable in the current stack frame.
 	 */
	syn String DeclStmt.address() = "-" + (localIndex() * 8) + "(%rbp)";

	/**
 	 * Local variable counting.
 	 */
	syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

	/**
 	 * Local variable numbering.
 	 */
	syn int ASTNode.localIndex() = prevNode().localIndex();
	eq Program.localIndex() = 0;
	eq DeclStmt.localIndex() = prevNode().localIndex() + 1;

	inh ASTNode ASTNode.prevNode();
	eq ASTNode.getChild(int i).prevNode() = prevNode(i);
	syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
	syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;

}
