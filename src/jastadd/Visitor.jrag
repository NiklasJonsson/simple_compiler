aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);

		public Object visit(Expr node, Object data);
		public Object visit(BinaryExpr node, Object data);
		public Object visit(ModExpr node, Object data);
		public Object visit(AddExpr node, Object data);
		public Object visit(SubExpr node, Object data);
		public Object visit(MulExpr node, Object data);
		public Object visit(DivExpr node, Object data);

		public Object visit(Stmt node, Object data);
		public Object visit(IfStmt node, Object data);
		public Object visit(WhileStmt node, Object data);
		public Object visit(AssStmt node, Object data);
		public Object visit(DeclStmt node, Object data);
		public Object visit(ReturnStmt node, Object data);
		public Object visit(FunctionStmt node, Object data);

		public Object visit(Block node, Object data);
		public Object visit(Equal node, Object data);
		public Object visit(NotEqual node, Object data);
		public Object visit(GreaterEqual node, Object data);
		public Object visit(LesserEqual node, Object data);
		public Object visit(Greater node, Object data);
		public Object visit(Lesser node, Object data);

		public Object visit(Condition node, Object data);
		public Object visit(Function node, Object data);
		public Object visit(FunctionId node, Object data);
		public Object visit(Param node, Object data);
		public Object visit(FunctionCall node, Object data);

		public Object visit(Numeral node, Object data);
		public Object visit(IdUse node, Object data);
		
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object MulExpr.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object DivExpr.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Numeral.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object DeclStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object AddExpr.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object SubExpr.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Stmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object WhileStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IfStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object AssStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Function.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ReturnStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Block.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Equal.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object NotEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GreaterEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Greater.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Lesser.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LesserEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object BinaryExpr.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FunctionCall.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ModExpr.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FunctionId.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Param.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Expr.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Condition.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
